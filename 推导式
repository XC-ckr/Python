1. 列表推导式的基础
列表推导式是一个用于生成新列表的表达式，其基本形式如下：

[expression for item in iterable]

这里，expression 是基于 item 的某种表达式，iterable 是任何可以遍历的对象。

例如，假设我们想要创建一个包含前10个正整数平方的列表。使用列表推导式，我们可以这样做：

squares = [x**2 for x in range(1, 11)]
print(squares)

输出：

[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

2. 列表推导式中的条件过滤
列表推导式还可以包含一个可选的条件子句，用于过滤出满足特定条件的项。其形式如下：

[expression for item in iterable if condition]

例如，如果我们只想要偶数的平方，可以这样做：

squares_of_evens = [x**2 for x in range(1, 11) if x % 2 == 0]
print(squares_of_evens)

输出：

[4, 16, 36, 64, 100]

##

字典推导式
{ key_expr: value_expr for value in collection }

或

{ key_expr: value_expr for value in collection if condition }
使用字符串及其长度创建字典：

实例
listdemo = ['Google','Runoob', 'Taobao']
# 将列表中各字符串值为键，各字符串的长度为值，组成键值对
>>> newdict = {key:len(key) for key in listdemo}
>>> newdict
{'Google': 6, 'Runoob': 6, 'Taobao': 6}
提供三个数字，以三个数字为键，三个数字的平方为值来创建字典：

实例
>>> dic = {x: x**2 for x in (2, 4, 6)}
>>> dic
{2: 4, 4: 16, 6: 36}
>>> type(dic)
<class 'dict'>

##

集合推导式
集合推导式基本格式：

{ expression for item in Sequence }
或
{ expression for item in Sequence if conditional }
计算数字 1,2,3 的平方数：

实例
>>> setnew = {i**2 for i in (1,2,3)}
>>> setnew
{1, 4, 9}
判断不是 abc 的字母并输出：

实例
>>> a = {x for x in 'abracadabra' if x not in 'abc'}
>>> a
{'d', 'r'}
>>> type(a)
<class 'set'>

##

元组推导式
元组推导式可以利用 range 区间、元组、列表、字典和集合等数据类型，快速生成一个满足指定需求的元组。

元组推导式基本格式：

(expression for item in Sequence )
或
(expression for item in Sequence if conditional )
元组推导式和列表推导式的用法也完全相同，只是元组推导式是用 () 圆括号将各部分括起来，而列表推导式用的是中括号 []，另外元组推导式返回的结果是一个生成器对象。

例如，我们可以使用下面的代码生成一个包含数字 1~9 的元组：

实例
>>> a = (x for x in range(1,10))
>>> a
<generator object <genexpr> at 0x7faf6ee20a50>  # 返回的是生成器对象

>>> tuple(a)       # 使用 tuple() 函数，可以直接将生成器对象转换成元组
(1, 2, 3, 4, 5, 6, 7, 8, 9)
